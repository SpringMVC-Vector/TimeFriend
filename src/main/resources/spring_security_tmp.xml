<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
						http://www.springframework.org/schema/security/oauth2
						http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
						http://www.springframework.org/schema/security
						http://www.springframework.org/schema/security/spring-security-3.2.xsd">
						
	<!-- 不需要权限认证，就可以访问资源 -->
	<http pattern="/public/**" security="none" />
	<http pattern="/static/**" security="none" />
	<http pattern="/api/*/public/**" security="none" create-session="always"/>
	<http pattern="/sessionTimeout*" security="none" />
	<http pattern='/login.*' security='none' />
	<http pattern="/web/**" security="none" /> 
	<!-- <http pattern="/api/kdhk/**" security="none" /> -->
	
	<!-- OAuth2 http -->
	<http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="oauth2AuthenticationManager">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />
		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>

	<http pattern="/api/*/custom/**" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager">
		<anonymous enabled="false" />
		<intercept-url pattern="/api/*/custom/**" access="ROLE_custom,SCOPE_READ" />
		<custom-filter ref="apiResourceServer" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>
	
	<http pattern="/api/*/staff/**" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager">
		<anonymous enabled="false" />
		<intercept-url pattern="/api/*/staff/**" access="ROLE_staff,SCOPE_READ" />
		<custom-filter ref="apiResourceServer" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>
	
	<http pattern="/api/*/seller/**" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager">
		<anonymous enabled="false" />
		<intercept-url pattern="/api/*/seller/**" access="ROLE_seller,SCOPE_READ" />
		<custom-filter ref="apiResourceServer" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>
	
	<http pattern="/api/*/admin/**" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager">
		<anonymous enabled="false" />
		<intercept-url pattern="/api/*/admin/**" access="ROLE_admin,SCOPE_READ" />
		<custom-filter ref="apiResourceServer" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>

	<http pattern="/api/**" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager">
		<anonymous enabled="false" />
		<intercept-url pattern="/api/**" access="ROLE_INTERCEPT_ALL_REQUESTS" />
		<custom-filter ref="apiResourceServer" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>
	<!-- login http -->
	<http auto-config="true">
		<intercept-url pattern="/**" access="ROLE_user" />
		<form-login login-page="/public/login.jsp" default-target-url="/"
			authentication-failure-url="/public/login.jsp?error=true" />
		<logout logout-success-url="/" />
	</http>
	
	<!-- authentication manager -->
	<authentication-manager>
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				role-prefix="ROLE_"
				users-by-username-query="select Name, Pwd, Enabled from Users where Name = ?"
				authorities-by-username-query="select su.Name,sa.authority from Users su,security_authorities sa,security_user_authority sua where su.id=sua.user_id and sa.id=sua.authority_id and su.Name = ?" />
<!-- 			<password-encoder hash="md5" base64="true">
				<salt-source user-property="username" />
			</password-encoder> -->
		</authentication-provider>
	</authentication-manager>
	
	<!-- token services -->
	<beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <beans:constructor-arg index="0" ref="dataSource"/>
    </beans:bean>
	<beans:bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="supportRefreshToken" value="true" />
		<beans:property name="refreshTokenValiditySeconds" value="31622400" /> <!-- refresh_token过期的时间的配置, 默认配置有效时间为 30天 -->
		<beans:property name="accessTokenValiditySeconds" value="31622400" />  <!-- token过期的时间的配置, 默认为12小时 -->                      
	</beans:bean>
	
	<!-- app client details service -->
	<oauth2:client-details-service id="appClientDetailsService">
		<oauth2:client client-id="app"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="secret_app" scope="read,write,trust" />
	</oauth2:client-details-service>
	<beans:bean id="oauth2ClientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="appClientDetailsService" />
	</beans:bean>
	<authentication-manager id="oauth2AuthenticationManager">
		<authentication-provider user-service-ref="oauth2ClientDetailsUserService" />
	</authentication-manager>
	<oauth2:authorization-server
		client-details-service-ref="appClientDetailsService" token-services-ref="tokenServices"
		user-approval-handler-ref="oauthUserApprovalHandler">
		<oauth2:authorization-code />
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password />
	</oauth2:authorization-server>
	
	<!-- oauth2 error -->
	<beans:bean id="oauth2AuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />
	<beans:bean id="oauth2AccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
	<beans:bean id="oauthUserApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler" />
		
	<!-- oauth2 vote -->
	<beans:bean id="oauth2AccessDecisionManager"
		class="org.springframework.security.access.vote.UnanimousBased">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean
					class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:bean
					class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>
	
	<!-- api resource server -->
	<oauth2:resource-server id="apiResourceServer"
		resource-id="api-resource" token-services-ref="tokenServices" />
	<beans:bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />
	</beans:bean>
	
	<!-- 
		OAuth 测试
		http://localhost:8080/zyt/oauth/token?client_id=app&client_secret=secret_app&grant_type=password&username=test3&password=123456
		http://localhost:8080/zyt/api/test/getTestModels?access_token=c267735b-da58-49d8-8664-23ef4fb21079
	 -->
</beans:beans>